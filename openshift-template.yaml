# Openshift template for NSC Recommendations
#
# Builds webpack resources in a disposable nodejs container, which are then added to the
# final Django container.
kind: Template
apiVersion: v1
metadata:
  name: django-webpack
  annotations:
    openshift.io/display-name: NSC Recommendations
    description: Django site using frontend resources built by Webpack
    openshift.io/long-description: This template builds Webpack resources in a
      disposable Node.js container before they are moved into a Python container for
      deployment, alongside an ephemeral Redis container for caching. A PostgreSQL
      server should be set up separately before building this.
    tags: django, webpack
    iconClass: icon-django
labels:
  template: "django-webpack"
  app: "django-webpack"
message: |-
  The following service(s) have been created in your project:
  ${NAME}, ${REDIS_SERVICE_NAME}.
objects:
#
# ConfigMap
#
- kind: ConfigMap
  apiVersion: v1
  metadata:
    name: "${NAME}"
  data:
    DJANGO_CONFIGURATION: "${DJANGO_CONFIGURATION}"
    DATABASE_HOST: "${DATABASE_HOST}"
    DATABASE_PORT: "${DATABASE_PORT}"
    DATABASE_NAME: "${DATABASE_NAME}"
    APP_MODULE: "${APP_MODULE}"
    APP_CONFIG: "${APP_CONFIG}"
    DJANGO_ADMINS: ""
    DJANGO_ALLOWED_HOSTS: "${APPLICATION_DOMAIN}"
    DJANGO_REDIS_HOST: "${REDIS_SERVICE_NAME}"
    DJANGO_REDIS_PORT: "6379"
    OBJECT_STORAGE_BUCKET_NAME: "${OBJECT_STORAGE_BUCKET_NAME}"
    OBJECT_STORAGE_DOMAIN_NAME: "${OBJECT_STORAGE_DOMAIN_NAME}"
    NOTIFY_TEMPLATE_CONSULTATION_INVITATION: "${NOTIFY_TEMPLATE_CONSULTATION_INVITATION}"
    NOTIFY_TEMPLATE_PUBLIC_COMMENT: "${NOTIFY_TEMPLATE_PUBLIC_COMMENT}"
    NOTIFY_TEMPLATE_STAKEHOLDER_COMMENT: "${NOTIFY_TEMPLATE_STAKEHOLDER_COMMENT}"
    CONSULTATION_COMMENT_ADDRESS: "${CONSULTATION_COMMENT_ADDRESS}"

#
# Secrets
#
- kind: Secret
  apiVersion: v1
  metadata:
    name: "${NAME}"
  stringData:
    DATABASE_USER: "${DATABASE_USER}"
    DATABASE_PASSWORD: "${DATABASE_PASSWORD}"
    DJANGO_SECRET_KEY: "${DJANGO_SECRET_KEY}"
    OBJECT_STORAGE_KEY_ID: "${OBJECT_STORAGE_KEY_ID}"
    OBJECT_STORAGE_SECRET_KEY: "${OBJECT_STORAGE_SECRET_KEY}"
    NOTIFY_SERVICE_API_KEY: "${NOTIFY_SERVICE_API_KEY}"
#
# ImageStreams
#
#   nodejs -> $NAME-webpack-build + python -> $NAME
#
# webpack-build: image based on nodejs which runs webpack
- kind: ImageStream
  apiVersion: v1
  metadata:
    name: "${NAME}-webpack-build"
#
# $NAME: image based on python with source from webpack-build
- kind: ImageStream
  apiVersion: v1
  metadata:
    # Final container which will run the Django project
    name: "${NAME}"
#
# BuildConfigs
#
# Build $NAME-webpack-build, to build the webpack resources
- kind: BuildConfig
  apiVersion: v1
  metadata:
    name: "${NAME}-webpack-build"
    annotations:
      description: Defines how to build the webpack builder
  spec:
    source:
      type: Git
      git:
        uri: ${SOURCE_REPOSITORY_URL}
        ref: ${SOURCE_REPOSITORY_REF}
      contextDir: ${CONTEXT_DIR}
    strategy:
      type: Source
      sourceStrategy:
        from:
          kind: ImageStreamTag
          namespace: "${NAMESPACE}"
          name: nodejs:${NODE_VERSION}
        incremental: true
    output:
      to:
        kind: ImageStreamTag
        name: "${NAME}-webpack-build:latest"
    triggers:
    - type: ConfigChange
    - type: ImageChange
#
# Build django-webpack using webpack-build as a source
- kind: BuildConfig
  apiVersion: v1
  metadata:
    name: "${NAME}"
    annotations:
      description: Defines how to build the Django application
      template.alpha.openshift.io/wait-for-ready: "true"
  spec:
    source:
      type: Git
      git:
        uri: "${SOURCE_REPOSITORY_URL}"
        ref: "${SOURCE_REPOSITORY_REF}"
      contextDir: "${CONTEXT_DIR}"
      images:
        - from:
            kind: ImageStreamTag
            name: "${NAME}-webpack-build:latest"
          paths:
            - sourcePath: /opt/app-root/src/frontend/dist
              destinationDir: frontend
    strategy:
      type: Source
      sourceStrategy:
        from:
          kind: ImageStreamTag
          namespace: "${NAMESPACE}"
          name: python:${PYTHON_VERSION}
        env:
        - name: DJANGO_CONFIGURATION
          value: "Build"
        - name: PIP_INDEX_URL
          value: "${PIP_INDEX_URL}"
        incremental: true
    output:
      to:
        kind: ImageStreamTag
        name: "${NAME}:latest"
    triggers:
    - type: ConfigChange
    - type: ImageChange
    - type: ImageChange
      imageChange:
        from:
          kind: ImageStreamTag
          name: "${NAME}-webpack-build:latest"
#
# DeploymentConfig
#
# Django application
- kind: DeploymentConfig
  apiVersion: v1
  metadata:
    name: "${NAME}"
    annotations:
      description: Defines how to deploy the application server
      template.alpha.openshift.io/wait-for-ready: "true"
  spec:
    strategy:
      type: Recreate
    triggers:
    - type: ConfigChange
    - type: ImageChange
      imageChangeParams:
        automatic: true
        containerNames:
        - django-webpack
        from:
          kind: ImageStreamTag
          name: "${NAME}:latest"
    replicas: 1
    selector:
      name: "${NAME}"
    template:
      metadata:
        name: "${NAME}"
        labels:
          name: "${NAME}"
      spec:
        containers:
        - name: django-webpack
          image: " "
          ports:
          - containerPort: 8080
          readinessProbe:
            timeoutSeconds: 3
            initialDelaySeconds: 3
            httpGet:
              path: "/_health/"
              port: 8080
          livenessProbe:
            timeoutSeconds: 3
            initialDelaySeconds: 30
            httpGet:
              path: "/_health/"
              port: 8080
          # Minimal env vars to get the project running - once started, settings will
          # look in the mounted DJANGO_CONFIG_DIR
          env:
          - name: DJANGO_CONFIGURATION
            valueFrom:
              configMapKeyRef:
                name: "${NAME}"
                key: DJANGO_CONFIGURATION
          - name: APP_MODULE
            valueFrom:
              configMapKeyRef:
                name: "${NAME}"
                key: APP_MODULE
          - name: APP_CONFIG
            valueFrom:
              configMapKeyRef:
                name: "${NAME}"
                key: APP_CONFIG
          - name: DJANGO_CONFIG_DIR
            value: "/run/configs/common"
          - name: DJANGO_SECRET_DIR
            value: "/run/secrets/common"
          resources:
            limits:
              memory: "${MEMORY_LIMIT}"
          volumeMounts:
          - name: config-common
            mountPath: "/run/configs/common"
            readOnly: true
          - name: secret-common
            mountPath: "/run/secrets/common"
            readOnly: true
        volumes:
        - name: config-common
          configMap:
            name: "${NAME}"
        - name: secret-common
          secret:
            secretName: "${NAME}"
#
# Redis
- kind: DeploymentConfig
  apiVersion: v1
  metadata:
    name: "${REDIS_SERVICE_NAME}"
    annotations:
      description: Defines how to deploy redis
      template.alpha.openshift.io/wait-for-ready: "true"
  spec:
    strategy:
      type: Recreate
    triggers:
    - type: ConfigChange
    - type: ImageChange
      imageChangeParams:
        automatic: true
        containerNames:
        - redis
        from:
          kind: ImageStreamTag
          namespace: "${NAMESPACE}"
          name: redis:${REDIS_VERSION}
    replicas: 1
    selector:
      name: "${REDIS_SERVICE_NAME}"
    template:
      metadata:
        labels:
          name: "${REDIS_SERVICE_NAME}"
      spec:
        containers:
        - name: redis
          image: " "
          ports:
          - containerPort: 6379
            protocol: TCP
          resources:
            limits:
              memory: "${MEMORY_REDIS_LIMIT}"
          readinessProbe:
            exec:
              command:
              - "/bin/sh"
              - "-i"
              - "-c"
              - test "$(redis-cli -h 127.0.0.1 ping)" == "PONG"
            initialDelaySeconds: 5
            timeoutSeconds: 1
          livenessProbe:
            initialDelaySeconds: 30
            tcpSocket:
              port: 6379
            timeoutSeconds: 1
#
# Services
#
# Django application
- kind: Service
  apiVersion: v1
  metadata:
    name: "${NAME}"
    annotations:
      description: Exposes and load balances the application pods
  spec:
    ports:
    - name: http
      protocol: TCP
      port: 8080
      targetPort: 8080
    selector:
      name: "${NAME}"
#
# Redis
- kind: Service
  apiVersion: v1
  metadata:
    name: "${REDIS_SERVICE_NAME}"
  spec:
    ports:
    - name: 6379-redis
      protocol: TCP
      port: 6379
      targetPort: 6379
    selector:
      name: "${REDIS_SERVICE_NAME}"
#
# Route
#
- kind: Route
  apiVersion: v1
  metadata:
    name: "${NAME}"
  spec:
    # TODO: Uncomment this when domain is known
    #host: "${APPLICATION_DOMAIN}"
    to:
      kind: Service
      name: "${NAME}"
#
# Parameters
#
parameters:
- name: NAME
  description: The name assigned to all objects defined in this template
  displayName: Name
  required: true
  value: django-webpack
- name: NAMESPACE
  displayName: Namespace
  required: true
  description: The OpenShift Namespace where the ImageStream resides.
  value: openshift
#
# Versions
- name: PYTHON_VERSION
  displayName: Version of Python Image
  description: Version of Python image to be used (3.6 or latest).
  value: "3.6"
  required: true
- name: REDIS_VERSION
  displayName: Version of Redis Image
  description: Version of Redis image to be used
  value: "latest"
  required: true
- name: NODE_VERSION
  displayName: Version of Node Image
  description: Version of Node image to be used (12 or latest).
  value: "10"
  required: true
#
# Resource management
- name: MEMORY_LIMIT
  displayName: Memory Limit
  required: true
  description: Maximum amount of memory the Django container can use.
  value: 512Mi
- name: MEMORY_REDIS_LIMIT
  displayName: Memory Limit (Redis)
  required: true
  description: Maximum amount of memory the Redis container can use.
  value: 512Mi
#
# Git and repository
- name: SOURCE_REPOSITORY_URL
  displayName: Git Repository URL
  required: true
  description: The URL of the repository with your application source code.
  value: "https://github.com/PublicHealthEngland/nsc-recommendations"
- name: SOURCE_REPOSITORY_REF
  displayName: Git Reference
  description: Set this to a branch name, tag or other ref of your repository if you
    are not using the default branch.
- name: CONTEXT_DIR
  displayName: Context Directory
  description: Set this to the relative path to your project if it is not in the root
    of your repository.
- name: APPLICATION_DOMAIN
  displayName: Application Hostname
  description: The exposed hostname that will route to the Django service, if left
    blank a value will be defaulted.
  value: ''
- name: GITHUB_WEBHOOK_SECRET
  displayName: GitHub Webhook Secret
  description: Github trigger secret.  A difficult to guess string encoded as part
    of the webhook URL.  Not encrypted.
  generate: expression
  from: "[a-zA-Z0-9]{40}"
#
# Postgresql
- name: DATABASE_HOST
  displayName: Database Host
  required: true
  value: postgresql
- name: DATABASE_PORT
  displayName: Database Port
  required: true
  value: "5432"
- name: DATABASE_NAME
  displayName: Database Name
  required: true
  value: default
- name: DATABASE_USER
  displayName: Database Username
  required: true
  value: django
- name: DATABASE_PASSWORD
  displayName: Database User Password
  required: true
#
# Redis
- name: REDIS_SERVICE_NAME
  displayName: Redis Service Name
  required: true
  value: redis
#
# Django app
- name: APP_MODULE
  displayName: Application Module
  description: Module for Gunicorn WSGI application object
  value: "nsc.wsgi"
- name: APP_CONFIG
  displayName: Application Configuration File Path
  description: Relative path to Gunicorn configuration file (optional).
  value: ""
- name: DJANGO_CONFIGURATION
  displayName: Django Configuration
  description: The name of the Django settings configuration to use (Stage or Prod)
  required: true
- name: DJANGO_SECRET_KEY
  displayName: Django Secret Key
  description: Set this to a long random string.
  generate: expression
  from: "[\\w]{50}"
- name: PIP_INDEX_URL
  displayName: Custom PyPi Index URL
  description: The custom PyPi index URL (optional)
  value: ''
- name: OBJECT_STORAGE_KEY_ID
  displayName: Object store key ID
  description: The key ID to access the S3-compatible store
  value: ''
- name: OBJECT_STORAGE_SECRET_KEY
  displayName: Object store secret key
  description: The secret key to access the S3-compatible store
  value: ''
- name: OBJECT_STORAGE_BUCKET_NAME
  displayName: Object store bucket name
  description: The name of the bucket in the S3-compatible store
  value: ''
- name: OBJECT_STORAGE_DOMAIN_NAME
  displayName: Object store domain
  description: The domain of the S3-compatible store
  value: ''
- name: NOTIFY_SERVICE_API_KEY
  displayName: API Key for the GOV.UK Notify service
  description: Set this API key for the PHE NSC project.
  value: ''
- name: NOTIFY_TEMPLATE_CONSULTATION_INVITATION
  displayName: Consultation invitation template identifier
  description: Set this to UUID for the Consultation Invitation template from the GOV.UK Notify service
  value: ''
- name: NOTIFY_TEMPLATE_PUBLIC_COMMENT
  displayName: Consultation public comment template identifier
  description: Set this to UUID for the Consultation public comment template from the GOV.UK Notify service
  value: ''
- name: NOTIFY_TEMPLATE_STAKEHOLDER_COMMENT
  displayName: Consultation stakeholder comment template identifier
  description: Set this to UUID for the Consultation stakeholder comment template from the GOV.UK Notify service
  value: ''
- name: CONSULTATION_COMMENT_ADDRESS
  displayName: Consultation comment email address
  description: The email address where comments during the consultation period are sent
  value: 'screening.evidence@nhs.net'
